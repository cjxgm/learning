<<< "---==== ", "assignment 2: untitled", " ====---\n" >>>;
// as a demoscene maker, writing a "module tracker" is so easy!

/**** note structure:
 * 0x00000000 => keep last note
 * 0x0000??00 => keep last note, but change volumn or panning
 * 0xFFFFFFFF => rest
 * 0x???????? => a note to be played
 *   |||||||`--- note represented by 0 to 7, for MIDI note
 *   |||||||     50, 52, 53, 55, 57, 59, 60 and 62, respectively
 *   ||||||`---- octave, 1~7, 4 for the normal octave.
 *   |||||`----- volume, 0~F, F for the max.
 *   ||||`------ panning, 0~F, 0 for the left most, F for the right most.
 *   |||`------- when ==1, double the drum/hi-hat.
 *   |||         when  >0, cut the srq/tri
 *   ||`-------- when ==1, random panning
 *   `'--------- reserved for (maybe) future use.
 ****/

// music sheet
[
	[	// sqr
		0x00104140, 0x00104100, 0x001c4140, 0x00154140,
		0x00104141, 0x00104100, 0x001c4141, 0x001c4141,
		0x00104140, 0x00104100, 0x00104140, 0x00104140,
		0x00104141, 0x00104100, 0x00174141, 0x00174141,

		0x00004140, 0x00000000, 0x00004140, 0x00004140,
		0x00004141, 0x00000000, 0x00000000, 0x00000000,
		0x000a4140, 0x00044140, 0x00084140, 0x00064140,
		0x00004141, 0x00000000, 0xFFFFFFFF, 0x00000000,

		0x0000a151, 0x00004147, 0x0000f151, 0x00000152,
		0x0000a151, 0x00004147, 0x0000f151, 0x00000145,
		0x0000a146, 0x00004144, 0x0000f146, 0x00000151,
		0x0000a147, 0x00004151, 0x0000f145, 0x00000143,

		0x00001146, 0x00000000, 0x00000000, 0x00000000,
		0x0000a147, 0x00000000, 0x00000000, 0x00000000,
		0x0000f153, 0x0000a152, 0x00004151, 0x00000147,
		0x0000f151, 0x0000a147, 0x00004146, 0x00000145,

		0x00001144, 0x00002143, 0x00004144, 0x00007145,
		0x00008146, 0x00009145, 0x0000b144, 0x0000d143,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,

		0x0000d140, 0x0000b137, 0x00009140, 0x00008141,
		0x00007142, 0x00004141, 0x00002140, 0x00001136,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,

		0x00104140, 0x00104100, 0x001c4140, 0x00154140,
		0x00104141, 0x00104100, 0x001c4141, 0x001c4141,
		0x00104140, 0x00104100, 0x00104140, 0x00104140,
		0x00104141, 0x00104100, 0x00174141, 0x00174141,
		0x00004140, 0x00000000, 0x00004140, 0x00004140,
		0x00004141, 0x00000000, 0x00000000, 0x00000000,
		0x000a4140, 0x00044140, 0x00084140, 0x00064140,
		0x00004141, 0x00000000, 0xFFFFFFFF, 0x00000000,
		0x00104140, 0x00104100, 0x001c4140, 0x00154140,
		0x00104141, 0x00104100, 0x001c4141, 0x001c4141,
		0x00104140, 0x00104100, 0x00104140, 0x00104140,
		0x00104141, 0x00104100, 0x00174141, 0x00174141,
		0x00004140, 0x00000000, 0x00004140, 0x00004140,
		0x00004141, 0x00000000, 0x00000000, 0x00000000,
		0x000a4140, 0x00044140, 0x00084140, 0x00064140,
		0x00004141, 0x00000000, 0xFFFFFFFF, 0x00000000,
		0x00104140, 0x00104100, 0x001c4140, 0x00154140,
		0x00104141, 0x00104100, 0x001c4141, 0x001c4141,
		0x00104140, 0x00104100, 0x00104140, 0x00104140,
		0x00104141, 0x00104100, 0x00174141, 0x00174141,
		0x00004140, 0x00000000, 0x00004140, 0x00004140,
		0x00004141, 0x00000000, 0x00000000, 0x00000000,
		0x000a4140, 0x00044140, 0x00084140, 0x00064140,
		0x00004141, 0x00000000, 0xFFFFFFFF, 0x00000000,
		0x00104140, 0x00104100, 0x001c4140, 0x00154140,
		0x00104141, 0x00104100, 0x001c4141, 0x001c4141,
		0x00104140, 0x00104100, 0x00104140, 0x00104140,
		0x00104141, 0x00104100, 0x00174141, 0x00174141,
		0x000a4140, 0x00044140, 0x00084140, 0x00064140,
		0x00004141, 0x00000000, 0xFFFFFFFF, 0x00000000
	],
	[	// tri
		0x0000A750, 0x00000000, 0x00000000, 0x00000000,
		0x0000A751, 0x00000000, 0x00000000, 0x00000000,
		0x0000A752, 0x00000000, 0x00000000, 0x00000000,
		0x0000A751, 0x00000000, 0x00000000, 0x00000000,

		0x0000A750, 0x00000000, 0x00000000, 0x00000000,
		0x0000A751, 0x00000000, 0x00000000, 0x00000000,
		0x0000A754, 0x00000000, 0x00000000, 0x00000000,
		0x0000A753, 0x00000000, 0x00000000, 0x00000000,

		0x0000A756, 0x00000000, 0x00000000, 0x00000000,
		0x0000A755, 0x00000000, 0x00000000, 0x00000000,
		0x0000A756, 0x00000000, 0x0000A757, 0x00000000,
		0x0000A761, 0x00000000, 0x0000A757, 0x00000000,

		0x0000A755, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x0000A753, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,

		0x0000A754, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,

		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f550, 0x00004400, 0x00007400, 0x00004400,
		0x0000f500, 0x00004400, 0x00007400, 0x00007400
	],
	[	// hi hat
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00007777, 0x00000000, 0x00007777, 0x00000000,
		0x00000000, 0x00000000, 0x00007777, 0x00000000,
		0x00017777, 0x00007777, 0x00007777, 0x00000000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000,
		0x00117777, 0x00010000, 0x00017777, 0x00010000
	],
	[	// drum
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00017835, 0x00017f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00017835, 0x00017f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00017835, 0x00017f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00017835, 0x00017f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00017835, 0x00017f55, 0x00007a44,
		0x00017944, 0x00007835, 0x00007f55, 0x00007a44,
		0x00007944, 0x00017835, 0x00017f55, 0x00007a44
	]
] @=> int notes[][];	// [channel][row]


// the module tracker
SqrOsc osc_sqr => Pan2 pan_sqr => dac;
TriOsc osc_tri => Pan2 pan_tri => dac;
Noise  osc_hat => Pan2 pan_hat => dac;	// hi hat
TriOsc osc_drm => Pan2 pan_drm => dac;	// drum

0.25::second => dur beat;
1.00::beat   => dur row;
(30::second / 1::beat) $int => int nbeat;	// convert float to int explicitly
[ 50, 52, 53, 55, 57, 59, 60, 62 ] @=> int to_midi_note[];

<<< "---==== ", "timing information", " ====---" >>>;
<<< "1 beat =", beat/second, "seconds =", beat, "samples" >>>;
<<< "1 row  =",  row/second, "seconds = ", row, "samples" >>>;
<<< "total", nbeat, "beats will be played." >>>;

0 => int crow;		// current row
0 => int nsample;	// how many samples passed after current row activated
now => time begin;	// to calculate duration

float last_gain[4];
float last_freq[4];
float last_pan [4];
int   last_samp[4];

while (crow::row < nbeat::beat) {
	for (0=>int i; i<4; i++) {
		if (nsample) break;
		notes[i][crow] => int note;

		// rest
		if (note == 0xFFFFFFFF) {
			0 => last_gain[i] => last_freq[i] => last_pan[i];
			continue;
		}

		// keep last note
		if (note == 0x00000000)
			continue;

		// octave/note change
		if (note & 0x000000FF) {
			to_midi_note[note & 0x0F] => int midi_note;
			(note>>4) & 0x0F => int octave;
			Std.mtof(midi_note + 12*(octave-4)) => last_freq[i];
			0 => last_samp[i];
		}

		// volume change
		((note>>8) & 0x0F) / 15.0 => last_gain[i];

		// panning change
		((note>>12) & 0x0F) / 15.0 * 2 - 1 => last_pan[i];
	}

	if (last_samp[0]::samp < 0.2::row)
		0.9999 *=> last_gain[0];

	if (last_samp[1]::samp < 0.2::row)
		0.9999 *=> last_gain[1];

	last_freq[0] => osc_sqr.freq;
	last_freq[1] => osc_tri.freq;
//	last_freq[2] => osc_hat.freq;
//	last_freq[3] => osc_drm.freq;

	last_gain[0] => osc_sqr.gain;
	last_gain[1] => osc_tri.gain;
//	last_gain[2] => osc_hat.gain;
	last_gain[3] => osc_drm.gain;

	last_pan [0] => pan_sqr.pan ;
	last_pan [1] => pan_tri.pan ;
	last_pan [2] => pan_hat.pan ;
	last_pan [3] => pan_drm.pan ;

	//// effect
	// cut
	if (((notes[0][crow]>>16) & 0x0F) &&
			last_samp[0]::samp > (((notes[0][crow]>>16) & 0x0F)/15.0)::row)
		0 => last_gain[0];
	if (((notes[1][crow]>>16) & 0x0F) &&
			last_samp[1]::samp > (((notes[1][crow]>>16) & 0x0F)/15.0)::row)
		0 => last_gain[1];

	// drum
	if (last_samp[3]::samp < 0.4::row) {
		(1.0 - last_samp[3]::samp/0.4::row) * last_freq[3] => osc_drm.freq;
	}
	else if (last_samp[3]::samp >= 0.5::row &&
			((notes[3][crow]>>16) & 0x0F) == 1)
		0 => last_samp[3];

	// hi hat
	if (last_samp[2]::samp < 0.1::row)
		last_gain[2]/4 => osc_hat.gain;
	else if (last_samp[2]::samp < 0.5::row)
		0 => osc_hat.gain;
	else if (((notes[2][crow]>>16) & 0x0F) == 1)
		0 => last_samp[2];

	// random panning
	if (((notes[0][crow]>>20) & 0x0F) == 1)
		last_pan[0] + Math.random2f(-0.2, 0.2) => pan_sqr.pan;
	if (((notes[1][crow]>>20) & 0x0F) == 1)
		last_pan[1] + Math.random2f(-0.2, 0.2) => pan_tri.pan;
	if (((notes[2][crow]>>20) & 0x0F) == 1)
		last_pan[2] + Math.random2f(-0.2, 0.2) => pan_hat.pan;
	if (((notes[3][crow]>>20) & 0x0F) == 1)
		last_pan[3] + Math.random2f(-0.2, 0.2) => pan_drm.pan;

	// advance sample and time
	if (++nsample == row/samp) {
		crow++;
		<<< "row", crow, "finished when", (now-begin)/second, "seconds passed." >>>;
		0 => nsample;
	}
	for (0=>int i; i<4; i++) last_samp[i]++;
	1::samp => now;
}

<<< "song ended with duration", (now-begin)/second >>>;

